name: Code PR Quality Checks

on:
  pull_request:
    branches:
      - main

jobs:
  # lint:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install dependencies
  #       working-directory: ./pablo-sand-box
  #       run: npm ci

  #     - name: Run ESLint on changed files
  #       working-directory: ./pablo-sand-box
  #       run: |
  #         BASE_REF="${{ github.event.pull_request.base.ref }}"
  #         git fetch origin $BASE_REF
  #         MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)
  #         CHANGED_FILES=$(git diff --name-only $MERGE_BASE..HEAD -- 'src/**/*.ts' 'src/**/*.html')

  #         echo "Detected modified files:"
  #         echo "$CHANGED_FILES"

  #         EXISTING_FILES=()
  #         for file in $CHANGED_FILES; do
  #           RELATIVE_FILE=$(echo "$file" | sed 's|^pablo-sand-box/||')
  #           if [ -f "$RELATIVE_FILE" ]; then
  #             EXISTING_FILES+=("$RELATIVE_FILE")
  #           fi
  #         done

  #         if [ ${#EXISTING_FILES[@]} -gt 0 ]; then
  #           echo "Linting existing changed files:"
  #           printf '%s\n' "${EXISTING_FILES[@]}"
  #           npx eslint "${EXISTING_FILES[@]}" --ext .ts,.html --max-warnings=0
  #         else
  #           echo "No valid TypeScript or HTML files to lint."
  #         fi


  # axe-lint:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Install jq
  #       run: |
  #         which jq || brew install jq || sudo apt-get install -y jq

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Download axe-linter binary from Agora
  #       env:
  #         ARTIFACTORY_TOKEN_AXELINTER: ${{ secrets.ARTIFACTORY_TOKEN_AXELINTER }}
  #       run: |
  #         curl -L -H "X-JFrog-Art-Api: $ARTIFACTORY_TOKEN_AXELINTER" \
  #           -o axe-linter-connector-macos \
  #           "https://agora.dequecloud.com/artifactory/linter-bin/axe-linter-connector/4.10.9/packages/connector/pkgs/@axe-devtools/axe-linter-connector-macos"
  #         chmod +x axe-linter-connector-macos
  #         xattr -d com.apple.quarantine axe-linter-connector-macos || true

  #     - name: Start Angular server in background
  #       run: |
  #         nohup npx ng serve --port 4200 --disable-host-check > /dev/null 2>&1 &
  #         sleep 30

  #     - name: Run axe-linter and fail on accessibility errors
  #       run: |
  #         mkdir -p ./dist/reports
  #         ./axe-linter-connector-macos \
  #           --reporter=sonarqube \
  #           --destination=./dist/reports \
  #           --filename=axe-report.json \
  #           --client-id=${{ secrets.NPM_EMAIL }} \
  #           --client-secret=${{ secrets.ARTIFACTORY_TOKEN_AXELINTER }} \
  #           --api-key=${{ secrets.AXE_LINTER_API_KEY }} \
  #           --source=./pablo-sand-box/src \
  #           --local \
  #           --debug

  #         echo "\n--- Accessibility Report ---"
  #         if [ -f ./dist/reports/axe-report.json ]; then
  #           cat ./dist/reports/axe-report.json
  #           ERRORS=$(jq '.issues | length' ./dist/reports/axe-report.json)
  #           if [ "$ERRORS" -gt 0 ]; then
  #             echo "\nAccessibility errors found: $ERRORS"
  #             exit 1
  #           else
  #             echo "\nNo accessibility errors found."
  #           fi
  #         else
  #           echo "axe-report.json not found!"
  #           exit 1
  #         fi

  #     - name: Upload axe report
  #       env:
  #         NODE_TLS_REJECT_UNAUTHORIZED: 0
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: axe-accessibility-report
  #         path: ./dist/reports/axe-report.json


  # accessibility-pa11y:
    # runs-on: self-hosted
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v3
    #     with:
    #       fetch-depth: 0

    #   - name: Set up Node.js
    #     uses: actions/setup-node@v3
    #     with:
    #       node-version: '18'

    #   - name: Install Pa11y
    #     run: npm install -g pa11y

    #   - name: Detect and scan modified HTML files and annotate
    #     working-directory: ./pablo-sand-box
    #     run: |
    #       BASE_REF="${{ github.event.pull_request.base.ref }}"
    #       git fetch origin $BASE_REF
    #       MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)
    #       CHANGED_FILES=$(git diff --name-only $MERGE_BASE..HEAD -- '*.html')

    #       echo "Modified HTML files:"
    #       echo "$CHANGED_FILES"

    #       EXISTING_HTML=()
    #       for file in $CHANGED_FILES; do
    #         RELATIVE_FILE=$(echo "$file" | sed 's|^pablo-sand-box/||')
    #         if [ -f "$RELATIVE_FILE" ]; then
    #           EXISTING_HTML+=("$RELATIVE_FILE")
    #         fi
    #       done

    #       ERRORS=0
    #       if [ ${#EXISTING_HTML[@]} -gt 0 ]; then
    #         echo "Scanning accessibility with Pa11y and generating annotations (estimated line):"
    #         for html_file in "${EXISTING_HTML[@]}"; do
    #           echo "â†’ $html_file"
    #           pa11y --reporter json file://$(pwd)/$html_file > pa11y-report.json || true
    #           ERRORS_FILE=$(mktemp)
    #           jq -c '.[] | select(.type=="error")' pa11y-report.json > "$ERRORS_FILE"
    #           while read -r issue; do
    #             MESSAGE=$(echo "$issue" | jq -r '.message')
    #             SELECTOR=$(echo "$issue" | jq -r '.selector')
    #             REPO_PATH="pablo-sand-box/$html_file"
    #             # Only for simple selectors: input, button, img, etc.
    #             SIMPLE_SELECTOR=$(echo "$SELECTOR" | grep -Eo '^[a-zA-Z0-9#\.-]+')
    #             if [ -n "$SIMPLE_SELECTOR" ]; then
    #               LINE=$(grep -n -m1 "$SIMPLE_SELECTOR" "$html_file" | cut -d: -f1)
    #               if [ -z "$LINE" ]; then LINE=1; fi
    #             else
    #               LINE=1
    #             fi
    #             echo "::error file=$REPO_PATH,line=$LINE::[Pa11y] $MESSAGE (selector: $SELECTOR)"
    #           done < "$ERRORS_FILE"
    #           ERRORS=$((ERRORS + $(wc -l < "$ERRORS_FILE")))
    #           rm "$ERRORS_FILE"
    #         done
    #       else
    #         echo "No valid HTML files to scan."
    #       fi

    #       if [ "$ERRORS" -gt 0 ]; then
    #         echo "Accessibility errors detected: $ERRORS"
    #         exit 1
    #       fi


  ux-models-review:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed UX-related files
        id: changed
        run: |
          set -e
          set -x
          BASE_REF="${{ github.event.pull_request.base.ref }}"
          echo "BASE_REF: $BASE_REF"
          git fetch origin $BASE_REF || { echo "git fetch failed"; exit 1; }
          MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD) || { echo "git merge-base failed"; exit 1; }
          echo "MERGE_BASE: $MERGE_BASE"
          FILES=$(git diff --name-only $MERGE_BASE..HEAD | grep -E '\.css$|\.scss$|\.less$|\.html$|\.js$|\.ts$|\.tsx$|\.jsx$' | paste -sd ',' -)
          echo "Detected files: $FILES"
          echo "files=$FILES" >> $GITHUB_OUTPUT

      - name: Prepare prompt for GitHub Models
        id: prompt
        run: |
          FILES="${{ steps.changed.outputs.files }}"
          echo "Analyzing files: $FILES"
          if [ -z "$FILES" ]; then
            echo "No UX-related files changed."
            echo "prompt=No UX-related files changed in this PR." >> $GITHUB_OUTPUT
            exit 0
          fi
          FILE_LIST=$(echo $FILES | tr ',' ' ')
          EXISTING_FILES=""
          for f in $FILE_LIST; do
            if [ -f "$f" ]; then
              EXISTING_FILES="$EXISTING_FILES $f"
            else
              echo "Warning: $f does not exist."
            fi
          done
          if [ -z "$EXISTING_FILES" ]; then
            echo "No existing files to analyze."
            echo "prompt=No existing UX-related files to analyze in this PR." >> $GITHUB_OUTPUT
            exit 0
          fi
          CONTENT=$(cat $EXISTING_FILES)
          {
            echo 'prompt<<EOF'
            echo "You are an expert in UX and accessibility. Review the following code (HTML, CSS, JS/TS) and suggest improvements in:"
            echo "- Accessibility (use of roles, aria, focus, navigation)"
            echo "- Visual consistency and design best practices"
            echo "- Clean and maintainable code (especially in React or Angular)"
            echo "Code:"
            echo
            echo "$CONTENT"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Call GitHub Models API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ steps.prompt.outputs.prompt }}" > prompt.txt
          PAYLOAD=$(jq -Rs '{model: "openai/gpt-4o", messages: [{role: "user", content: .}]}' < prompt.txt)
          RESPONSE=$(curl -s https://models.github.ai/inference/chat/completions \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")
          echo "$RESPONSE" > ai-response.json

      - name: Comment AI suggestions on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('ai-response.json', 'utf8');
            const parsed = JSON.parse(body);
            const message = parsed.choices[0].message.content;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸ§  **AI Suggestions for UX and Accessibility**:\n\n${message}`
            });
