name: Code PR Quality Checks

on:
  pull_request:
    branches:
      - main

jobs:
  # lint:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install dependencies
  #       working-directory: ./pablo-sand-box
  #       run: npm ci

  #     - name: Run ESLint on changed files
  #       working-directory: ./pablo-sand-box
  #       run: |
  #         BASE_REF="${{ github.event.pull_request.base.ref }}"
  #         git fetch origin $BASE_REF
  #         MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)
  #         CHANGED_FILES=$(git diff --name-only $MERGE_BASE..HEAD -- 'src/**/*.ts' 'src/**/*.html')

  #         echo "Detected modified files:"
  #         echo "$CHANGED_FILES"

  #         EXISTING_FILES=()
  #         for file in $CHANGED_FILES; do
  #           RELATIVE_FILE=$(echo "$file" | sed 's|^pablo-sand-box/||')
  #           if [ -f "$RELATIVE_FILE" ]; then
  #             EXISTING_FILES+=("$RELATIVE_FILE")
  #           fi
  #         done

  #         if [ ${#EXISTING_FILES[@]} -gt 0 ]; then
  #           echo "Linting existing changed files:"
  #           printf '%s\n' "${EXISTING_FILES[@]}"
  #           npx eslint "${EXISTING_FILES[@]}" --ext .ts,.html --max-warnings=0
  #         else
  #           echo "No valid TypeScript or HTML files to lint."
  #         fi


  # axe-lint:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5

  #     - name: Install jq
  #       run: |
  #         which jq || brew install jq || sudo apt-get install -y jq

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Download axe-linter binary from Agora
  #       env:
  #         ARTIFACTORY_TOKEN_AXELINTER: ${{ secrets.ARTIFACTORY_TOKEN_AXELINTER }}
  #       run: |
  #         curl -L -H "X-JFrog-Art-Api: $ARTIFACTORY_TOKEN_AXELINTER" \
  #           -o axe-linter-connector-macos \
  #           "https://agora.dequecloud.com/artifactory/linter-bin/axe-linter-connector/4.10.9/packages/connector/pkgs/@axe-devtools/axe-linter-connector-macos"
  #         chmod +x axe-linter-connector-macos
  #         xattr -d com.apple.quarantine axe-linter-connector-macos || true

  #     - name: Start Angular server in background
  #       run: |
  #         nohup npx ng serve --port 4200 --disable-host-check > /dev/null 2>&1 &
  #         sleep 30

  #     - name: Run axe-linter and fail on accessibility errors
  #       run: |
  #         mkdir -p ./dist/reports
  #         ./axe-linter-connector-macos \
  #           --reporter=sonarqube \
  #           --destination=./dist/reports \
  #           --filename=axe-report.json \
  #           --client-id=${{ secrets.NPM_EMAIL }} \
  #           --client-secret=${{ secrets.ARTIFACTORY_TOKEN_AXELINTER }} \
  #           --api-key=${{ secrets.AXE_LINTER_API_KEY }} \
  #           --source=./pablo-sand-box/src \
  #           --local \
  #           --debug

  #         echo "\n--- Accessibility Report ---"
  #         if [ -f ./dist/reports/axe-report.json ]; then
  #           cat ./dist/reports/axe-report.json
  #           ERRORS=$(jq '.issues | length' ./dist/reports/axe-report.json)
  #           if [ "$ERRORS" -gt 0 ]; then
  #             echo "\nAccessibility errors found: $ERRORS"
  #             exit 1
  #           else
  #             echo "\nNo accessibility errors found."
  #           fi
  #         else
  #           echo "axe-report.json not found!"
  #           exit 1
  #         fi

  #     - name: Upload axe report
  #       env:
  #         NODE_TLS_REJECT_UNAUTHORIZED: 0
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: axe-accessibility-report
  #         path: ./dist/reports/axe-report.json

    accessibility-pa11y:
        runs-on: self-hosted
        steps:
          - name: Checkout code
            uses: actions/checkout@v3
            with:
              fetch-depth: 0

          - name: Set up Node.js
            uses: actions/setup-node@v3
            with:
              node-version: '18'

          - name: Install Pa11y and jq
            run: |
              npm install -g pa11y
              if ! command -v jq &> /dev/null; then
                if [[ "$RUNNER_OS" == "Linux" ]]; then
                  sudo apt-get update && sudo apt-get install -y jq
                elif [[ "$RUNNER_OS" == "macOS" ]]; then
                  brew install jq
                fi
              fi


          - name: Detect and scan modified HTML files
            working-directory: ./pablo-sand-box
            run: |
              BASE_REF="${{ github.event.pull_request.base.ref }}"
              git fetch origin $BASE_REF
              MERGE_BASE=$(git merge-base origin/$BASE_REF HEAD)
              CHANGED_FILES=$(git diff --name-only $MERGE_BASE..HEAD -- '*.html')

              echo "Archivos HTML modificados:"
              echo "$CHANGED_FILES"

              EXISTING_HTML=()
              for file in $CHANGED_FILES; do
                RELATIVE_FILE=$(echo "$file" | sed 's|^pablo-sand-box/||')
                if [ -f "$RELATIVE_FILE" ]; then
                  EXISTING_HTML+=("$RELATIVE_FILE")
                fi
              done

              HAS_ERRORS=0

              if [ ${#EXISTING_HTML[@]} -gt 0 ]; then
                echo "Escaneando accesibilidad con Pa11y:"
                for html_file in "${EXISTING_HTML[@]}"; do
                  echo "→ $html_file"
                  OUTPUT=$(pa11y file://$(pwd)/"$html_file" --reporter json 2>/dev/null || true)

                  if [ -n "$OUTPUT" ]; then
                    ERRORS=$(echo "$OUTPUT" | jq -c '.issues[]')
                    if [ -n "$ERRORS" ]; then
                      echo "$ERRORS" | while read -r issue; do
                        MESSAGE=$(echo "$issue" | jq -r '.message')
                        SELECTOR=$(echo "$issue" | jq -r '.selector')
                        echo "::error file=$html_file,title=Accesibilidad::$MESSAGE (selector: $SELECTOR)"
                      done
                      HAS_ERRORS=1
                    fi
                  fi
                done
              else
                echo "No hay archivos HTML válidos para escanear."
              fi

              if [ "$HAS_ERRORS" -eq 1 ]; then
                echo "Errores de accesibilidad detectados."
                exit 1
              else
                echo "Sin errores de accesibilidad."
              fi
